:- use_module(alphabeta).
:- use_module(connect4).

% bestMove(+Pos, -NextPos)
% Compute the best Next Position from Position Pos
% with minimax or alpha-beta algorithm.
bestMove(Pos, NextPos) :-
    alphabeta(Pos, -1000, 1000, NextPos, _).


% play
% Start the game.
play :-
    nl,
    write('===================='), nl,
    write('=     Connect Four    ='), nl,
    write('===================='), nl, nl,
    write('Rem : x starts the game'), nl,
    playerMark.



% playAskColor
% Ask the color for the human player and start the game with it.
playerMark:-
	  repeat,
	  nl, write('Color for human player ? (x or o)'), nl,
	  read(Player), nl,
	  (Player == o; Player == x),
          EmptyBoard = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	  show(EmptyBoard), nl,
          play([x, play, EmptyBoard], Player).



% play(+Position, +HumanPlayer)
% If next player to play in position is equal to HumanPlayer -> Human must play
% Ask to human what to do.
play([Player, play, Board], Player) :- !,
    nl, write('Next move ? (1-7)'), nl,
    read(Pos), nl, % Ask human where to play
    ( Pos <8,
      Pos >0,
      humanMove([Player, play, Board], [NextPlayer, State, NextBoard], Pos), !,
      show(NextBoard),
      (
        State = win, !,                             % If Player win -> stop
        nl, write('End of game : '),
        write(Player), write(' win !'), nl, nl
        ;
        State = draw, !,                            % If draw -> stop
        nl, write('End of game : '),
        write(' draw !'), nl, nl
        ;
        play([NextPlayer, play, NextBoard], Player) % Else -> continue the game
      )
      ;
      write('-> Bad Move !'), nl,                % If humanMove fail -> bad move
      play([Player, play, Board], Player)        % Ask again
   ).


% play(+Position, +HumanPlayer)
% If it is not human who must play -> Computer must play
% Compute the best move for computer with minimax or alpha-beta.
play([Player, play, Board], HumanPlayer) :-
    nl, write('Computer play : '), nl, nl,
    % Compute the best move
    bestMove([Player, play, Board], [NextPlayer, State,
    BestSuccBoard]),
    show(BestSuccBoard),
    (
      State = win, !, %  If Player win -> stop
      nl, write('End of game : '),
      write(Player), write(' win !'), nl, nl
      ;
      State = draw, !,                                % If draw -> stop
      nl, write('End of game : '), write(' draw !'), nl, nl
      ;
      % Else -> continue the game
      play([NextPlayer, play, BestSuccBoard], HumanPlayer)
).



% nextPlayer(X1, X2)
% True if X2 is the next player to play after X1.
nextPlayer(o, x).
nextPlayer(x, o).

% When human play

humanMove([X1, play, Board], [X2, State, NextBoard], Pos) :-
    nextPlayer(X1, X2),
    (Pos1 is Pos +35,
     nth1(Pos1,Board,X,_),
    X == 0;
    Pos1 is Pos + 28,
    nth1(Pos1, Board, X,_),
    X ==0;
    Pos1 is Pos +21,
     nth1(Pos1, Board, X,_),
    X ==0;
    Pos1 is Pos + 14,
     nth1(Pos1, Board, X,_),
    X ==0;
    Pos1 is Pos + 7,
     nth1(Pos1, Board, X,_),
    X ==0;
    Pos1 is Pos,
     nth1(Pos1, Board, X,_),
    X ==0),
    set1(Pos1, X1, Board, NextBoard),
    decide(X1,NextBoard,State).

decide(X,Board,win):-
    isWin(X,Board),!.
decide(X,Board,draw):-
    drawPos(X,Board),!.
decide(_,_,play).


% set1(+Elem, +Pos, +List, -ResList).
% Set Elem at Position Pos in List => Result in ResList.
% Rem : counting starts at 1.
set1(1, E, [X|Ls], [E|Ls]) :- !, X = 0.

set1(P, E, [X|Ls], [X|L2s]) :-
    number(P),
    P1 is P - 1,
    set1(P1, E, Ls, L2s).

% show(+Board)
% Show the board to current output.
show([X1, X2, X3, X4, X5, X6, X7|T]) :-
    write(' | '), show2(X1),
    write(' | '), show2(X2),
    write(' | '), show2(X3),
    write(' | '), show2(X4),
    write(' | '), show2(X5),
    write(' | '), show2(X6),
    write(' | '), show2(X7),
    write(' | '), nl,
    show(T).

show([]):-
    write(' |___|___|___|___|___|___|___| ').

% show2(+Term)
% Write the term to current outupt
% Replace 0 by ' '.
show2(X) :-
    X = 0, !,
    write(' ').

show2(X) :-
    write(X).


